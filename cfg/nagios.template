define host {
    name                            generic-host ; The name of this host template
    notifications_enabled           1            ; Host notifications are enabled
    event_handler_enabled           1            ; Host event handler is enabled
    flap_detection_enabled          1            ; Flap detection is enabled
    failure_prediction_enabled      1            ; Failure prediction is enabled
    process_perf_data               1            ; Process performance data
    retain_status_information       1            ; Retain status information across program restarts
    retain_nonstatus_information    1            ; Retain non-status information across program restarts
    check_command                   check-host-alive
    max_check_attempts              10
    notification_interval           0
    notification_period             24x7
    notification_options            d,u,r
    register                        0
    contacts                        default
}

define service {
    name                            generic-service ; The 'name' of this service template
    active_checks_enabled           1       ; Active service checks are enabled
    passive_checks_enabled          1       ; Passive service checks are enabled/accepted
    parallelize_check               1       ; Active service checks should be parallelized (disabling this can lead to major performance problems)
    obsess_over_service             1       ; We should obsess over this service (if necessary)
    check_freshness                 0       ; Default is to NOT check service 'freshness'
    notifications_enabled           1       ; Service notifications are enabled
    event_handler_enabled           1       ; Service event handler is enabled
    flap_detection_enabled          1       ; Flap detection is enabled
    failure_prediction_enabled      1       ; Failure prediction is enabled
    process_perf_data               1       ; Process performance data
    retain_status_information       1       ; Retain status information across program restarts
    retain_nonstatus_information    1       ; Retain non-status information across program restarts
    notification_interval           0       ; Only send notifications on status change by default.
    is_volatile                     0
    check_period                    24x7
    normal_check_interval           5
    retry_check_interval            1
    max_check_attempts              4
    notification_period             24x7
    notification_options            w,u,c,r
    contacts                        default
    register                        0       ; DONT REGISTER THIS DEFINITION - ITS NOT A REAL SERVICE, JUST A TEMPLATE!
}

define timeperiod {
    timeperiod_name 24x7
    alias           24 Hours A Day, 7 Days A Week
    sunday          00:00-24:00
    monday          00:00-24:00
    tuesday         00:00-24:00
    wednesday       00:00-24:00
    thursday        00:00-24:00
    friday          00:00-24:00
    saturday        00:00-24:00
}

define timeperiod {
    timeperiod_name workhours
    alias           Standard Work Hours
    monday          09:00-17:00
    tuesday         09:00-17:00
    wednesday       09:00-17:00
    thursday        09:00-17:00
    friday          09:00-17:00
}

define timeperiod {
    timeperiod_name nonworkhours
    alias           Non-Work Hours
    sunday          00:00-24:00
    monday          00:00-09:00,17:00-24:00
    tuesday         00:00-09:00,17:00-24:00
    wednesday       00:00-09:00,17:00-24:00
    thursday        00:00-09:00,17:00-24:00
    friday          00:00-09:00,17:00-24:00
    saturday        00:00-24:00
}

define timeperiod {
    timeperiod_name never
    alias           Never
}

define contact {
    contact_name                    default
    alias                           "Default monitoring list"
    service_notification_period     24x7
    host_notification_period        24x7
    service_notification_options    w,u,c,r
    host_notification_options       d,r
    service_notification_commands   notify-service-by-email
    host_notification_commands      notify-host-by-email
    email                           {{ state.defaults.mon }}
}

{% for user in state.users %}
define contact {
    contact_name                    {{ user.nickname }}
    alias                           {{ user.name }}
    service_notification_period     24x7
    host_notification_period        24x7
    service_notification_options    w,u,c,r
    host_notification_options       d,r
    service_notification_commands   notify-service-by-email
    host_notification_commands      notify-host-by-email
    email                           {{ user.email }}
}
{% endfor %}

{% for group in state.groups %}
define hostgroup {
    hostgroup_name  {{ group.name }}
    alias           {{ group.name }}
}
{% endfor %}

{% for host in state.hosts %}
define host {
    use        generic-host
    host_name  {{ state.get_canonical_hostname(host) }}
    alias      {{ state.get_canonical_hostname(host) }}
    {%- if 'nagios' in host.props -%}
    {%- for name, value in host.props['nagios'].iteritems() %}
    {{ name }} {{ value }}
    {%- endfor -%}
    {%- endif -%}
    {%- if 'volatile' in host.props %}
    notifications_enabled      0
    flap_detection_enabled     0
    failure_prediction_enabled 0
    {% endif %}
    {%- if host.groups %}
    hostgroups {{ host.groups|join(',') }}
    {%- endif %}
    {%- if host.addr %}
    address    {{ host.addr }}
    {%- else %}
    address    {{ host.name }}
    {%- endif %}
    contacts   {% if 'admin' in host.props %}{{ host.props['admin'] }},{% endif %}default
}

{% if 'services' in host.props %}

{% if 'unix' in host.props['services'] or 'ssh' in host.props['services'] %}
define service {
    use                 generic-service
    host_name           {{ state.get_canonical_hostname(host) }}
    service_description SSH server
    {%- if 'ssh_port' in host.props %}
    check_command       check_ssh_port!{{ host.props['ssh_port']}}
    {%- else %}
    check_command       check_ssh
    {%- endif %}
    contacts            {% if 'admin' in host.props %}{{ host.props['admin'] }},{% endif %}default
    {%- if 'volatile' in host.props %}
    notifications_enabled      0
    flap_detection_enabled     0
    failure_prediction_enabled 0
    {% endif %}
}
{% endif %}

{% if 'http' in host.props['services'] %}
define service {
    use                 generic-service
    service_description HTTP server
    check_command       check_http
    host_name           {{ state.get_canonical_hostname(host) }}
    contacts            {% if 'admin' in host.props %}{{ host.props['admin'] }},{% endif %}default
    {%- if 'volatile' in host.props %}
    notifications_enabled      0
    flap_detection_enabled     0
    failure_prediction_enabled 0
    {% endif %}
}
{% endif %}

{% if 'unix' in host.props['services'] %}
define service {
    use                 generic-service
    service_description CPU load
    check_command       check_nrpe_1arg!check_load
    host_name           {{ state.get_canonical_hostname(host) }}
    contacts            {% if 'admin' in host.props %}{{ host.props['admin'] }},{% endif %}default
    {%- if 'volatile' in host.props %}
    notifications_enabled      0
    flap_detection_enabled     0
    failure_prediction_enabled 0
    {% endif %}
}

define service {
    use                 generic-service
    service_description Disk usage
    check_command       check_nrpe_1arg!check_disk
    host_name           {{ state.get_canonical_hostname(host) }}
    contacts            {% if 'admin' in host.props %}{{ host.props['admin'] }},{% endif %}default
    {%- if 'volatile' in host.props %}
    notifications_enabled      0
    flap_detection_enabled     0
    failure_prediction_enabled 0
    {% endif %}
}

define service {
    use                 generic-service
    service_description Process count
    check_command       check_nrpe_1arg!check_total_procs
    host_name           {{ state.get_canonical_hostname(host) }}
    contacts            {% if 'admin' in host.props %}{{ host.props['admin'] }},{% endif %}default
    {%- if 'volatile' in host.props %}
    notifications_enabled      0
    flap_detection_enabled     0
    failure_prediction_enabled 0
    {% endif %}
}

define service {
    use                 generic-service
    service_description Zombie processes
    check_command       check_nrpe_1arg!check_zombie_procs
    host_name           {{ state.get_canonical_hostname(host) }}
    contacts            {% if 'admin' in host.props %}{{ host.props['admin'] }},{% endif %}default
    {%- if 'volatile' in host.props %}
    notifications_enabled      0
    flap_detection_enabled     0
    failure_prediction_enabled 0
    {% endif %}
}

{% if not 'managed' in host.props %}
define service {
    use                 generic-service
    service_description APT package state
    check_command       check_nrpe_1arg!check_apt
    check_interval      3600
    host_name           {{ state.get_canonical_hostname(host) }}
    contacts            {% if 'admin' in host.props %}{{ host.props['admin'] }},{% endif %}default
    {%- if 'volatile' in host.props %}
    notifications_enabled      0
    flap_detection_enabled     0
    failure_prediction_enabled 0
    {% endif %}
}
{% endif %}

{% endif %}

{% endif %}

{% endfor %}
