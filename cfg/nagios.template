define host {
    name                    cfg-generic-host
    use                     generic-host
    max_check_attempts      10
    notification_interval   0
    check_command           check-host-alive
    register                0
}

define service {
    name                    cfg-generic-service
    use                     generic-service
    notification_interval   0
    register                0
}

define timeperiod {
    timeperiod_name managed_up
    alias           Uptime of managed machines
    sunday          00:30-07:30
    monday          00:30-07:30
    tuesday         00:30-07:30
    wednesday       00:30-07:30
    thursday        00:30-07:30
    friday          00:30-07:30
    saturday        00:30-07:30
}

define contact {
    contact_name                    default
    alias                           "Default monitoring list"
    service_notification_period     24x7
    host_notification_period        24x7
    service_notification_options    w,u,c,r
    host_notification_options       d,r
    service_notification_commands   notify-service-by-email
    host_notification_commands      notify-host-by-email
    email                           {{ state.defaults.mon }}
}

define command {
    command_name    no-puppet
    command_line    $USER1$/check_dummy 2 "Puppet agent didn't work for a while"
}

define command {
    command_name    check_arp_table
    command_line    /usr/lib/nagios/plugins/check_arp $ARG1$ $ARG2$
}

define command {
    command_name    check_ups_capacity
    command_line    /usr/lib/nagios/plugins/check_snmp -H '$HOSTADDRESS$' -C '$ARG1$' -o .1.3.6.1.4.1.318.1.1.1.2.2.1.0 -w 90: -c 50: -u '%' -l 'Battery capacity'
}

define command {
    command_name    check_ups_load
    command_line    /usr/lib/nagios/plugins/check_snmp -H '$HOSTADDRESS$' -C '$ARG1$' -o .1.3.6.1.4.1.318.1.1.1.4.2.3.0 -w 70 -c 85 -u '%' -l 'Load'
}

define command {
    command_name    check_ups_int_temp
    command_line    /usr/lib/nagios/plugins/check_snmp -H '$HOSTADDRESS$' -C '$ARG1$' -o .1.3.6.1.4.1.318.1.1.1.2.2.2.0 -w 12:30 -c 10:33 -u ' C' -l 'Internal temperature'
}

define command {
    command_name    check_ups_ext_temp
    command_line    /usr/lib/nagios/plugins/check_snmp -H '$HOSTADDRESS$' -C '$ARG1$' -o .1.3.6.1.4.1.318.1.1.10.2.3.2.1.4.1 -w 12:33 -c 10:35 -u ' C' -l 'External temperature'
}

define command {
    command_name    check_self_dns
    command_line    /usr/lib/nagios/plugins/check_dns -H '$ARG1$' -s '$ARG1$'
}

{% for user in state.users.itervalues() %}
define contact {
    contact_name                    {{ user.nickname }}
    alias                           {{ user.name }}
    service_notification_period     24x7
    host_notification_period        24x7
    service_notification_options    w,u,c,r
    host_notification_options       d,r
    service_notification_commands   notify-service-by-email
    host_notification_commands      notify-host-by-email
    email                           {{ user.email }}
}
{% endfor %}

{% for group in state.groups %}
define hostgroup {
    hostgroup_name  {{ group.name }}
    alias           {{ group.name }}
}
{% endfor %}

{% for host in state.hosts %}

define service {
    use                 cfg-generic-service
    name                service-on-{{ state.get_canonical_hostname(host) }}
    register            0

    {% if not external %}
    host_name           {{ state.get_canonical_hostname(host) }}
    {% endif %}
    contacts            {% if 'admin' in host.props %}{{ host.props['admin'] }},{% endif %}default
    {%- if 'volatile' in host.props %}
    notifications_enabled      0
    flap_detection_enabled     0
    {% endif %}
    {%- if 'nagios_service' in host.props -%}
    {%- for name, value in host.props['nagios_service'].iteritems() %}
    {{ name }} {{ value }}
    {%- endfor -%}
    {%- endif %}
}

{% if not external or not state.is_gray(host) %}
define host {
    use        cfg-generic-host
    host_name  {{ state.get_canonical_hostname(host) }}
    alias      {{ state.get_canonical_hostname(host) }}
    {%- if 'nagios' in host.props -%}
    {%- for name, value in host.props['nagios'].iteritems() %}
    {{ name }} {{ value }}
    {%- endfor -%}
    {%- endif -%}
    {%- if 'volatile' in host.props %}
    notifications_enabled      0
    flap_detection_enabled     0
    {% endif %}
    {%- if host.groups %}
    hostgroups {{ host.groups|map('first')|join(',') }}
    {%- endif %}
    {%- if host.addr %}
    address    {{ host.addr }}
    {%- else %}
    address    {{ host.name }}
    {%- endif %}
    contacts   {% if 'admin' in host.props %}{{ host.props['admin'] }},{% endif %}default

    {% if external %}
        {% if 'noicmp' in state.belongs_to(host).props %}
            {% if 'http' in host.services %}
                check_command check_http2!{{ state.get_canonical_hostname(host) }}
            {% elif 'dns' in host.services %}
                check_command check_self_dns!{{ host.name }}
            {% else %}
                check_command return-unknown
            {% endif %}
        {% endif %}
    {% else %}
        {% if 'ipmi' in host.services and host.macs|count == 1 and 'switch' in host.props %}
        check_command   check_arp_table!{{ host.props['switch'] }}!{{ host.macs[0] }}
        {% endif %}
    {% endif %}
}

{% if 'services' in host.props %}

{% if 'unix' in host.props['services'] or 'ssh' in host.props['services'] %}
define service {
    use                 service-on-{{ state.get_canonical_hostname(host) }}
    service_description SSH server
    {%- if 'ssh_port' in host.props %}
    check_command       check_ssh_port!{{ host.props['ssh_port']}}
    {%- else %}
    check_command       check_ssh
    {%- endif %}
}
{% endif %}

{% if 'unix' in host.props['services'] %}
define service {
    use                     service-on-{{ state.get_canonical_hostname(host) }}
    service_description     Puppet client
    active_checks_enabled   0
    passive_checks_enabled  1
    check_freshness         1
    max_check_attempts      1
    freshness_threshold     93600
    check_command           no-puppet
}
{% endif %}


{% if 'ups' in host.props['services'] %}
define service {
    use                 service-on-{{ state.get_canonical_hostname(host) }}
    service_description Battery capacity
    check_command       check_ups_capacity!public
}
define service {
    use                 service-on-{{ state.get_canonical_hostname(host) }}
    service_description Load
    check_command       check_ups_load!public
}
define service {
    use                 service-on-{{ state.get_canonical_hostname(host) }}
    service_description Internal temperature
    check_command       check_ups_int_temp!public
}
{% if 'ext_temp' in host.props['services'] %}
define service {
    use                 service-on-{{ state.get_canonical_hostname(host) }}
    service_description External temperature
    check_command       check_ups_ext_temp!public
}
{% endif %}
{% endif %}

{% if 'dns' in host.services %}
define service {
    use                 service-on-{{ state.get_canonical_hostname(host) }}
    service_description {{ host.name }}
    check_command       check_self_dns!{{ host.name }}
}
{% endif %}

{% if 'unix' in host.props['services'] %}
define service {
    use                 service-on-{{ state.get_canonical_hostname(host) }}
    service_description CPU load
    check_command       check_nrpe!check_load
}
define service {
    use                 service-on-{{ state.get_canonical_hostname(host) }}
    service_description Free memory
    check_command       check_nrpe!check_memory
}
define service {
    use                 service-on-{{ state.get_canonical_hostname(host) }}
    service_description Disk usage
    check_command       check_nrpe!check_disk
}
define service {
    use                 service-on-{{ state.get_canonical_hostname(host) }}
    service_description Process count
    check_command       check_nrpe!check_total_procs
}
define service {
    use                 service-on-{{ state.get_canonical_hostname(host) }}
    service_description Zombie processes
    check_command       check_nrpe!check_zombie_procs
}
{% if 'sensors' in host.props %}
define service {
    use                 service-on-{{ state.get_canonical_hostname(host) }}
    service_description Sensors
    check_command       check_nrpe!check_sensors
}
{% endif %}

{% if 'megaraid' in host.props['services'] %}
define service {
    use                 service-on-{{ state.get_canonical_hostname(host) }}
    service_description RAID status
    check_command       check_nrpe!check_megaraid
}
{% endif %}

{% if 'postgresql' in host.props['services'] %}
define service {
    use                 service-on-{{ state.get_canonical_hostname(host) }}
    service_description PostgreSQL
    check_command       check_nrpe!check_postgresql
}
{% endif %}

{% if not 'managed' in host.props %}
define service {
    use                 service-on-{{ state.get_canonical_hostname(host) }}
    service_description APT package state
    check_command       check_nrpe!check_apt
    check_interval      3600
}
{% endif %}

{% endif %}

{% endif %}

{% endif %}

{% endfor %}

{% for host in state.hosts %}
  {% if 'http' in host.props['services'] %}
    {% if 'backend_for' in host.props %}
      {% if host.props['backend_for'] is string %}
        {% set hostnames = [host.props['backend_for']] %}
      {% else %}
        {% set hostnames = host.props['backend_for'] %}
     {% endif %}
    {% else %}
      {% if external and not state.is_gray(host) %}
        {% set hostnames = [state.get_canonical_hostname(host)] %}
      {% endif %}
    {% endif %}
    {% for vhost in hostnames %}
      {% if vhost.find('*') == -1 %}
      define service {
          use                 service-on-{{ state.get_canonical_hostname(host) }}
          {% if external %}
            host_name           {{ state.get_canonical_hostname(
                                       state.find(state.defaults.frontend)) }}
          {% endif %}
          {% if 'backend_for' in host.props %}
          service_description http://{{ vhost }}
          check_command       check_http2!{{ vhost }}
          {% else %}
          service_description HTTP server
          check_command       check_http
          {% endif %}
      }
      {% endif %}
    {% endfor %}
  {% endif %}
{% endfor %}
