class slurm {
    package { 'munge':      ensure => installed }
    package { 'slurm-llnl': ensure => installed }

    file { '/etc/munge/munge.key':
        require => Package['munge'],
        notify => Service['munge'],
        mode => 400,
        owner => munge,
        group => munge,
        source => "puppet:///files/munge.key",
    }

    service { 'munge':
        ensure => 'running',
        enable => 'true',
        require => File['/etc/munge/munge.key'],
    }

    file { '/etc/slurm-llnl/slurm.conf':
        require => Package['slurm-llnl'],
        notify => Service['slurm-llnl'],
        mode => 644,
        owner => root,
        group => root,
        source => "puppet:///files/slurm.conf",
    }

    service { 'slurm-llnl':
        require => Service['munge'],
        ensure => 'running',
        enable => 'true',
    }
}

class managed-ssh {
    package { 'openssh-server': ensure => installed }

    service { 'ssh':
        ensure  => 'running',
        enable  => 'true',
    }

    file { '/etc/ssh/ssh_host_dsa_key':
        notify => Service['ssh'],
        mode => 600,
        owner => root,
        group => root,
        source => "puppet:///$hostname/ssh_host_dsa_key",
    }

    file { '/etc/ssh/ssh_host_dsa_key.pub':
        notify => Service['ssh'],
        mode => 644,
        owner => root,
        group => root,
        source => "puppet:///$hostname/ssh_host_dsa_key.pub",
    }

    file { '/etc/ssh/ssh_host_rsa_key':
        notify => Service['ssh'],
        mode => 600,
        owner => root,
        group => root,
        source => "puppet:///$hostname/ssh_host_rsa_key",
    }

    file { '/etc/ssh/ssh_host_rsa_key.pub':
        notify => Service['ssh'],
        mode => 644,
        owner => root,
        group => root,
        source => "puppet:///$hostname/ssh_host_rsa_key.pub",
    }
}

class startcom {
    file { 'startcom.crt':
        path => '/usr/local/share/ca-certificates/startcom.crt',
        mode => 644,
        owner => root,
        group => root,
        source => 'puppet:///files/startcom.crt',
    }

    exec { '/usr/sbin/update-ca-certificates -f':
        subscribe => File['startcom.crt'],
        refreshonly => true,
    }
}

class known_hosts {
    file { 'known_hosts.sh':
        path => '/usr/local/bin/known_hosts.sh',
        mode => 500,
        owner => root,
        group => root,
        source => 'puppet:///files/known_hosts.sh'
    }

    exec { '/usr/local/bin/known_hosts.sh -y':
        subscribe => File['known_hosts.sh'],
        refreshonly => true,
    }
}

class hadoop_base {
    file { '/etc/hadoop/hadoop-env.sh':
        mode => 644,
        owner => root,
        group => root,
        source => 'puppet:///files/hadoop/hadoop-env.sh',
    }

    file { '/etc/hadoop/masters':
        mode => 644,
        owner => root,
        group => root,
        source => 'puppet:///files/hadoop/masters',
    }

    file { '/etc/hadoop/core-site.xml':
        mode => 644,
        owner => root,
        group => root,
        source => 'puppet:///files/hadoop/core-site.xml',
    }

    file { '/etc/hadoop/hdfs-site.xml':
        mode => 644,
        owner => root,
        group => root,
        source => 'puppet:///files/hadoop/hdfs-site.xml',
    }

    file { '/etc/hadoop/mapred-site.xml':
        mode => 644,
        owner => root,
        group => root,
        source => 'puppet:///files/hadoop/mapred-site.xml',
    }

    file { '/place':
        ensure => directory,
        mode => '+t,ug+rwx,o-rw,o+x',
        owner => root,
        group => place,
    }

    file { '/place/hadoop':
        ensure => directory,
        mode => 770,
        owner => hdfs,
        group => hadoop,
    }

    file { '/place/hadoop/tmp':
        ensure => directory,
        mode => 770,
        owner => hdfs,
        group => hadoop,
    }

    file { '/place/hadoop/name':
        ensure => directory,
        mode => 700,
        owner => hdfs,
        group => hadoop,
    }

    file { '/place/hadoop/data':
        ensure => directory,
        mode => 755,
        owner => hdfs,
        group => hadoop,
    }

    file { '/place/hadoop/pid':
        ensure => directory,
        mode => 775,
        owner => hdfs,
        group => hadoop,
    }

    file { '/place/hadoop/run':
        ensure => directory,
        mode => 775,
        owner => mapred,
        group => hadoop,
    }

    file { '/place/hadoop/logs':
        ensure => directory,
        mode => 775,
        owner => mapred,
        group => hadoop,
    }
}

class hadoop_slave inherits hadoop_base {
    service { 'hadoop-datanode':
        ensure => running,
        enable => true,
        subscribe => [
            File['/etc/hadoop/hadoop-env.sh'],
            File['/etc/hadoop/masters'],
            File['/etc/hadoop/core-site.xml'],
            File['/etc/hadoop/hdfs-site.xml'],
            File['/etc/hadoop/mapred-site.xml'],

            File['/place'],
            File['/place/hadoop'],
            File['/place/hadoop/tmp'],
            File['/place/hadoop/name'],
            File['/place/hadoop/data'],
            File['/place/hadoop/pid'],
            File['/place/hadoop/run'],
            File['/place/hadoop/logs'],
        ],

        require => [
            File['/etc/hadoop/hadoop-env.sh'],
            File['/etc/hadoop/masters'],
            File['/etc/hadoop/core-site.xml'],
            File['/etc/hadoop/hdfs-site.xml'],
            File['/etc/hadoop/mapred-site.xml'],

            File['/place'],
            File['/place/hadoop'],
            File['/place/hadoop/tmp'],
            File['/place/hadoop/name'],
            File['/place/hadoop/data'],
            File['/place/hadoop/pid'],
            File['/place/hadoop/run'],
            File['/place/hadoop/logs'],
        ]
    }

    service { 'hadoop-tasktracker':
        ensure => running,
        enable => true,
        subscribe => [
            File['/etc/hadoop/hadoop-env.sh'],
            File['/etc/hadoop/masters'],
            File['/etc/hadoop/core-site.xml'],
            File['/etc/hadoop/hdfs-site.xml'],
            File['/etc/hadoop/mapred-site.xml'],

            File['/place'],
            File['/place/hadoop'],
            File['/place/hadoop/tmp'],
            File['/place/hadoop/name'],
            File['/place/hadoop/data'],
            File['/place/hadoop/pid'],
            File['/place/hadoop/run'],
            File['/place/hadoop/logs'],
        ],

        require => [
            File['/etc/hadoop/hadoop-env.sh'],
            File['/etc/hadoop/masters'],
            File['/etc/hadoop/core-site.xml'],
            File['/etc/hadoop/hdfs-site.xml'],
            File['/etc/hadoop/mapred-site.xml'],

            File['/place'],
            File['/place/hadoop'],
            File['/place/hadoop/tmp'],
            File['/place/hadoop/name'],
            File['/place/hadoop/data'],
            File['/place/hadoop/pid'],
            File['/place/hadoop/run'],
            File['/place/hadoop/logs'],
        ]
    }
}

class hadoop_master inherits hadoop_base {
    service { 'hadoop-namenode':
        ensure => running,
        enable => true,
        subscribe => [
            File['/etc/hadoop/hadoop-env.sh'],
            File['/etc/hadoop/masters'],
            File['/etc/hadoop/core-site.xml'],
            File['/etc/hadoop/hdfs-site.xml'],
            File['/etc/hadoop/mapred-site.xml'],

            File['/place'],
            File['/place/hadoop'],
            File['/place/hadoop/tmp'],
            File['/place/hadoop/name'],
            File['/place/hadoop/data'],
            File['/place/hadoop/pid'],
            File['/place/hadoop/run'],
            File['/place/hadoop/logs'],
        ],

        require => [
            File['/etc/hadoop/hadoop-env.sh'],
            File['/etc/hadoop/masters'],
            File['/etc/hadoop/core-site.xml'],
            File['/etc/hadoop/hdfs-site.xml'],
            File['/etc/hadoop/mapred-site.xml'],

            File['/place'],
            File['/place/hadoop'],
            File['/place/hadoop/tmp'],
            File['/place/hadoop/name'],
            File['/place/hadoop/data'],
            File['/place/hadoop/pid'],
            File['/place/hadoop/run'],
            File['/place/hadoop/logs'],
        ]
    }

    service { 'hadoop-jobtracker':
        ensure => running,
        enable => true,
        subscribe => [
            File['/etc/hadoop/hadoop-env.sh'],
            File['/etc/hadoop/masters'],
            File['/etc/hadoop/core-site.xml'],
            File['/etc/hadoop/hdfs-site.xml'],
            File['/etc/hadoop/mapred-site.xml'],

            File['/place'],
            File['/place/hadoop'],
            File['/place/hadoop/tmp'],
            File['/place/hadoop/name'],
            File['/place/hadoop/data'],
            File['/place/hadoop/pid'],
            File['/place/hadoop/run'],
            File['/place/hadoop/logs'],
        ],

        require => [
            File['/etc/hadoop/hadoop-env.sh'],
            File['/etc/hadoop/masters'],
            File['/etc/hadoop/core-site.xml'],
            File['/etc/hadoop/hdfs-site.xml'],
            File['/etc/hadoop/mapred-site.xml'],

            File['/place'],
            File['/place/hadoop'],
            File['/place/hadoop/tmp'],
            File['/place/hadoop/name'],
            File['/place/hadoop/data'],
            File['/place/hadoop/pid'],
            File['/place/hadoop/run'],
            File['/place/hadoop/logs'],
        ]
    }
}

class distcc {
    package { 'distcc':
        ensure => installed,
    }

    file { 'distcc.sh':
        path => '/usr/local/bin/distcc.sh',
        mode => 500,
        owner => root,
        group => root,
        source => 'puppet:///files/distcc.sh',

        require => Service['slurm-llnl'],
    }

    cron { 'distcc-hosts':
        command => '/usr/local/bin/distcc.sh',
        user => root,
        hour => '*',
        minute => '*',
        require => [Package['distcc'], File['distcc.sh']],
    }
}

class btsync {
    if $architecture == 'amd64' {
        file { 'btsync':
            path => '/usr/local/bin/btsync',
            ensure => present,
            mode => '755',
            owner => root,
            group => root,
            source => 'puppet:///files/btsync_amd64',
        }
    }
    elsif $architecture == 'i386' {
        file { 'btsync':
            path => '/usr/local/bin/btsync',
            ensure => present,
            mode => '755',
            owner => root,
            group => root,
            source => 'puppet:///files/btsync_i386',
        }
    }
}

class xen {
    file { '/etc/default/xendomains':
        ensure => present,
        mode => '644',
        owner => root,
        group => root,
        source => 'puppet:///files/xendomains',
    }
}

class userqwer {
    user { 'user':
        ensure => present,
        groups => ['sudo'],
        home => '/home/user',
        shell => '/bin/bash',
        password => '$1$DWV8BrMQ$v8TnXmLTDA38CiVBEMndf.',
    }
}

class ldap {
    file { '/etc/ssl/dc3.cer':
        ensure => present,
        mode => '644',
        owner => root,
        group => root,
        source => 'puppet:///files/dc3.cer',
    }
}

class nvidia {
    file { '/etc/X11/xorg.conf':
        ensure => present,
        mode => '644',
        owner => root,
        group => root,
        source => 'puppet:///files/nvidia.xorg.conf',
    }

    service { 'gdm':
        ensure => running,
        enable => true,
        require => File['/etc/X11/xorg.conf'],
        subscribe => File['/etc/X11/xorg.conf'],
    }
}

class sp {
    file { '/usr/local/bin/sp':
        ensure => present,
        mode => '755',
        owner => root,
        group => root,
        source => 'puppet:///files/sp',
    }

    file { '/etc/sudoers.d/sp':
        ensure => present,
        mode => '600',
        owner => root,
        group => root,
        source => 'puppet:///files/sp.sudoers',
    }

    exec { '/usr/local/bin/sp':
        subscribe => File['/usr/local/bin/sp'],
        refreshonly => true,
    }
}

{% for host in state.hosts %}
node '{{ host.name }}' {
    {% if 'managed' in host.props %}
        include managed-ssh
        include hadoop_slave
    {% endif %}

    {% if 'hadoop-master' in host.props['services'] %}
        include hadoop_master
    {% endif %}

    package { 'ntp':
        ensure => installed,
    }

    {% if 'unix' in host.services %}
        $nrpe_allowed = '{{ ([state.get_nagios(host.addr)]
            + host.props.get('nrpe_allowed', []))|join(',') }}'
        {% if host.addr %}
            $nrpe_listen = '{{ host.addr }}'
        {% else %}
            $nrpe_listen = '0.0.0.0'
        {% endif %}

        {% if 'managed' in host.props %}
            $check_apt = 'false'
        {% else %}
            $check_apt = 'true'
        {% endif %}

        {% if 'nagios' in host.services %}
            $check_nagios = 'true'
        {% else %}
            $check_nagios = 'false'
        {% endif %}

        {% if 'xen' in host.services %}
            include xen
        {% endif %}

        {% if 'userqwer' in host.services %}
            include userqwer
        {% endif %}

        {% if 'nvidia' in host.services %}
            include nvidia
        {% endif %}

        include btsync
        include distcc
        include known_hosts
        include nrpe
        include slurm
        include startcom
        include ldap
        include sp

    {% endif %}
}
{% endfor %}
